// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract FunctionModifier {
    bool public paused;
    uint public count;

    function setPause(bool _paused) external {
        paused = _paused;
    }
    // Basic modifier
    modifier whenNotPaused() {
     require(!paused, "paused");
     _;
    }

    function inc() external whenNotPaused {
        count += 1;
    }

    function dec() external whenNotPaused {
        count -= 1;
}
    // input modifier
    modifier cap (uint _x) {
        require(_x < 100, "x >= 100");
        _;
    }

    function incBy(uint _x) external whenNotPaused cap(_x) {
        count += 1;
    }

    // sandwich modifier
    modifier sandwich(){
        //code
        count += 10;
        _;

        // more code
        count *= 2;
    }

    function foo() external sandwich {
            count += 1;
        }

}
